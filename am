#!/data/data/com.termux/files/usr/bin/bash

# 定义颜色常量
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # 恢复默认颜色

# 配置文件参数
CONFIG_FILE="$HOME/apple-music-alac-atmos-downloader/config.yaml"
# 仓库克隆
REPO_DIR="apple-music-alac-atmos-downloader"
# 首次安装检测
INSTALL_FLAG="$HOME/.install_done"
# 日志文件路径
LOG_FILE="$HOME/install.log"

# 日志级别常量
LOG_INFO="INFO"
LOG_WARNING="WARNING"
LOG_ERROR="ERROR"

# 创建日志文件函数
create_log_file() {
    if [ ! -f "$LOG_FILE" ]; then
        # 创建日志文件并检查权限
        touch "$LOG_FILE"
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}[INFO] 日志文件已创建${NC}" >> "$LOG_FILE"
        else
            echo -e "${RED}[ERROR] 无法创建日志文件！${NC}" >&2
            exit 1
        fi
    fi
}

# 日志输出函数
log_message() {
    local level="$1"
    local message="$2"
    
    # 获取当前时间
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")

    # 构建日志消息
    local log_entry="[$timestamp] [$level] $message"

    # 输出到终端并高亮不同级别的日志
    case $level in
        "INFO")
            echo -e "${GREEN}$log_entry${NC}"  # INFO以绿色显示
            ;;
        "WARNING")
            echo -e "${YELLOW}$log_entry${NC}"  # WARNING以黄色显示
            ;;
        "ERROR")
            echo -e "${RED}$log_entry${NC}"  # ERROR以红色显示
            ;;
        *)
            echo -e "$log_entry"
            ;;
    esac

    # 输出到日志文件
    echo "$log_entry" >> "$LOG_FILE"
}

# 用于输出信息日志
log_info() {
    log_message "$LOG_INFO" "$1"
}

# 用于输出警告日志
log_warning() {
    log_message "$LOG_WARNING" "$1"
}

# 用于输出错误日志
log_error() {
    log_message "$LOG_ERROR" "$1"
}

# 初始化日志文件
create_log_file
log_info "脚本启动，开始执行安装过程..."

# 检查是否已经安装过
if [ -f "$INSTALL_FLAG" ]; then
    log_info "已经安装过，无需重新运行安装步骤。"
else
    # 首次运行时更新软件包
    log_info "更新软件源并升级系统..."
    pkg update -y && pkg upgrade -y
    touch "$INSTALL_FLAG"  # 标记已安装

    # 下载并解压 Bento4 工具
    BENTO4_ZIP="bento4.zip"
    BENTO4_URL="https://github.com/Karune-SHI-E/script/releases/download/tgs/bento4_tools_android.zip"
    INSTALL_DIR="$PREFIX/bin"

    log_info "开始下载 Bento4 工具..."
    wget -O "$BENTO4_ZIP" -q "$BENTO4_URL"

    log_info "开始解压 Bento4 工具..."
    unzip -qo "$BENTO4_ZIP" -d "$INSTALL_DIR"

    log_info "清理临时文件..."
    rm -f "$BENTO4_ZIP"

    log_info "Bento4 工具下载和解压完成！"
fi

# 需要安装的软件包
REQUIRED_PKGS=(git golang gpac ffmpeg yq unzip wget vim mpv)
declare -A PKG_DESC=(
    [git]="版本控制工具"
    [golang]="Go语言环境"
    [gpac]="MP4多媒体处理"
    [ffmpeg]="音视频转码工具"
    [yq]="YAML配置处理器"
    [unzip]="解压缩工具"
    [wget]="文件下载工具"
    [vim]="文本编辑器"
    [mpv]="mpv音频"
)

# 依赖安装检查
install_dependencies() {
    log_info "检查系统依赖..."
    for pkg in "${REQUIRED_PKGS[@]}"; do
        if ! command -v "$pkg" &>/dev/null; then
            log_info "正在安装 ${PKG_DESC[$pkg]} ($pkg)..."
            pkg install -y "$pkg" || {
                log_error "$pkg 安装失败! 请手动执行："
                log_error "pkg install $pkg"
                exit 1
            }
        else
            log_info "$pkg 已安装，跳过..."
        fi
    done

    log_info "所有依赖包检查完成！"
}

# 增强存储权限检查
check_storage() {
    while [ ! -d "/storage/emulated/0/" ]; do
        clear
        log_warning "必须授予存储权限才能继续！"
        log_info "请按以下步骤操作："
        log_info "1. 在Termux中执行以下命令："
        log_info "   termux-setup-storage"
        log_info "2. 在系统弹窗中点击 [允许]"
        log_info "3. 按回车键继续..."
        read -p ""
        
        termux-setup-storage
        sleep 3
        
        if [ ! -d "/storage/emulated/0/" ]; then
            log_error "授权未完成，请检查："
            log_error "1. 已正确执行 termux-setup-storage"
            log_error "2. Termux已获得存储权限"
            log_error "3. 重新启动Termux后重试"
            read -p "按回车键重试..."
        fi
    done
}

# 仓库管理
manage_repo() {
    REPO_URL="https://github.com/zhaarey/apple-music-alac-atmos-downloader.git"
    
    # 如果仓库目录不存在，克隆仓库
    if [ ! -d "$REPO_DIR" ]; then
        log_info "仓库目录不存在，开始克隆仓库..."
        git clone --depth=1 "$REPO_URL" "$REPO_DIR" || {
            log_error "仓库克隆失败! 请检查网络或 Git 配置"
            exit 1
        }
        log_info "仓库克隆成功，开始编译项目..."
        pushd "$REPO_DIR" > /dev/null
        go run .
        popd > /dev/null
    else
        # 仓库目录已存在，检查是否有更新
        log_info "仓库已存在，检查更新..."
        pushd "$REPO_DIR" > /dev/null

        # 获取本地和远程仓库的当前 commit ID
        LOCAL_COMMIT=$(git rev-parse HEAD)
        REMOTE_COMMIT=$(git ls-remote origin -h refs/heads/$(git rev-parse --abbrev-ref HEAD) | awk '{print $1}')

        # 判断本地和远程仓库是否一致
        if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
            log_info "发现新版本，正在拉取更新..."
            git fetch origin
            git merge origin/$(git rev-parse --abbrev-ref HEAD) || {
                log_warning "合并过程中出现冲突，请手动解决冲突"
                popd > /dev/null
                exit 1
            }
            log_info "仓库更新完成，当前版本：$(git rev-parse HEAD)"
        else
            log_info "当前已是最新版本"
            sleep 3
            echo "正在进入脚本中"
        fi

        popd > /dev/null
    fi
}

# URL有效性验证
validate_url() {
    local url="$1"
    if [[ "$url" != *"music.apple.com"* ]]; then
        log_error "链接格式错误，请输入有效的Apple Music链接"
        return 1
    fi
    return 0
}

# 如果没有设置 CONFIG_FILE，则默认使用当前目录下的 config.yaml
CONFIG_FILE="${CONFIG_FILE:-./config.yaml}"

# 检查 config.yaml 文件是否存在
if [ ! -f "$CONFIG_FILE" ]; then
    echo "错误：$CONFIG_FILE 文件未找到！"
    exit 1
fi

# 获取指定字段的当前值
get_current_value() {
    field=$1
    grep "^$field:" "$CONFIG_FILE" | awk -F': ' '{print $2}'
}

# 编辑字段（保留引号）
edit_field_with_quotes() {
    field=$1
    current_value=$(get_current_value "$field")
    echo "当前值: $current_value"
    read -p "请输入新的值用于 $field: " new_value
    if [ -z "$new_value" ]; then
        echo "未输入新值，操作已取消。"
        return
    fi

    # 对于特定路径字段验证目录是否存在
    if [[ "$field" == "alac-save-folder" || "$field" == "atmos-save-folder" ]]; then
        if [ ! -d "$new_value" ]; then
            echo "错误：路径 $new_value 无效或不存在。"
            return
        fi
    fi

    # 使用 # 作为分隔符，避免路径中的 / 产生冲突
    sed -i "s#^$field:.*#$field: \"$new_value\"#" "$CONFIG_FILE"
    echo "$field 已成功编辑为 \"$new_value\""
}

# 编辑字段（不保留引号）
edit_field_without_quotes() {
    field=$1
    current_value=$(get_current_value "$field")
    echo "当前值: $current_value"
    read -p "请输入新的值用于 $field: " new_value
    if [ -z "$new_value" ]; then
        echo "未输入新值，操作已取消。"
        return
    fi
    sed -i "s/^$field:.*/$field: $new_value/" "$CONFIG_FILE"
    echo "$field 已成功编辑为 $new_value"
}

# 切换布尔型字段值
toggle_field() {
    field=$1
    current_value=$(get_current_value "$field")
    echo "当前值: $current_value"
    if [ "$current_value" == "true" ]; then
        sed -i "s/^$field:.*/$field: false/" "$CONFIG_FILE"
        echo "$field 已成功切换为 false"
    elif [ "$current_value" == "false" ]; then
        sed -i "s/^$field:.*/$field: true/" "$CONFIG_FILE"
        echo "$field 已成功切换为 true"
    else
        echo "错误：$field 的当前值无效。"
    fi
}

# 显示菜单
config_edit() {
    clear
    echo "==================== config 配置编辑器 ===================="
    echo "请选择要编辑的选项："
    echo "1. 编辑 media-user-token"
    echo "2. 编辑 authorization-token"
    echo "3. 切换 get-m3u8-from-device"
    echo "4. 编辑 language"
    echo "5. 编辑 lrc-type"
    echo "6. 编辑 lrc-format"
    echo "7. 切换 embed-lrc"
    echo "8. 切换 save-lrc-file"
    echo "9. 切换 save-artist-cover"
    echo "10. 切换 save-animated-artwork"
    echo "11. 切换 emby-animated-artwork"
    echo "12. 切换 embed-cover"
    echo "13. 编辑 cover-size"
    echo "14. 编辑 cover-format"
    echo "15. 编辑 alac-save-folder"
    echo "16. 编辑 atmos-save-folder"
    echo "17. 编辑 max-memory-limit"
    echo "18. 编辑 decrypt-m3u8-port"
    echo "19. 编辑 get-m3u8-port"
    echo "20. 编辑 get-m3u8-mode"
    echo "21. 编辑 aac-type"
    echo "22. 编辑 alac-max"
    echo "23. 编辑 atmos-max"
    echo "24. 编辑 limit-max"
    echo "25. 编辑 album-folder-format"
    echo "26. 编辑 playlist-folder-format"
    echo "27. 编辑 song-file-format"
    echo "28. 编辑 artist-folder-format"
    echo "29. 编辑 explicit-choice"
    echo "30. 编辑 clean-choice"
    echo "31. 编辑 apple-master-choice"
    echo "32. 切换 use-songinfo-for-playlist"
    echo "33. 切换 dl-albumcover-for-playlist"
    echo "34. 编辑 mv-audio-type"
    echo "35. 编辑 mv-max"
    echo "36. 返回主菜单"
    echo "===================================================="
    echo -n "请输入您的选择 (1-36): "
}

# 使用帮助信息
show_help() {
    clear
    echo -e "${GREEN}==== 使用说明 ====${NC}"
    echo -e "\n${GREEN}★ 链接格式示例${NC}"
    echo -e "  - 专辑: https://music.apple.com/us/album/whenever-you-need-somebody-2022-remaster/1624945511"
    echo -e "  - 歌单: https://music.apple.com/us/playlist/taylor-swift-essentials/pl.3950454ced8c45a3b0cc693c2a7db97b9"
    echo -e "  - 杜比: https://music.apple.com/us/album/1989-taylors-version-deluxe/1713845538 (需带杜比标记)"
    
    echo -e "\n${GREEN}★ m3u8端口模式说明${NC}"
    echo -e "  - true: 满血端口"
    echo -e "  - false: 残血端口"

    echo -e "\n${RED}⚠ 常见问题${NC}"
    echo -e "  - 解密错误 127.0.0.1:10020 → 重启客户端"
    echo -e "  - 下载24 192出现 EOF错误 → 把get-m3u8-from-device: true（把true改成false）"
    echo -e "  - 下载完成后→ 改成true，不然后续下载是残血"
    echo -e "  - nano /data/data/com.termux/files/home/apple-music-alac-atmos-downloader/config.yaml"
    echo -e "\n${YELLOW}按任意键返回主菜单...${NC}"
    read -n1 -s
}

# 下载功能
run_download() {  
    local choice=$1
    cd "$REPO_DIR" || { echo -e "${RED}无法进入项目目录！${NC}"; return 1; }

    # 从 config.yaml 文件中读取保存文件夹路径
    ALAC_SAVE_FOLDER=$(yq eval '.alac-save-folder' config.yaml)
    ATMOS_SAVE_FOLDER=$(yq eval '.atmos-save-folder' config.yaml)

    while true; do
        # 获取有效链接
        while :; do
            read -p "请输入有效链接（或输入 0 返回主菜单）: " url
            if [[ "$url" == "0" ]]; then
                cd ..
                return
            fi
            if validate_url "$url"; then
                break
            fi
        done

        case $choice in  
        1)  
            echo -e "${CYAN}开始下载指定曲目...${NC}"  
            go run main.go --select "$url"
            ;;  
        2)  
            echo -e "${CYAN}开始下载专辑内容...${NC}"  
            go run main.go "$url"  
            ;;  
        3)  
            echo -e "${CYAN}开始下载杜比全景声...${NC}"  
            go run main.go --atmos "$url"  
            ;;  
        *)  
            echo -e "${RED}无效的选择！${NC}"
            return 1
            ;;  
        esac  

        # 显示保存路径  
        echo -e "\n${GREEN}文件保存位置：${CYAN}$ALAC_SAVE_FOLDER${NC}"  
        if [ $choice -ne 3 ]; then
            echo -e "普通音频: ${CYAN}$ALAC_SAVE_FOLDER${NC}"  
        else
            echo -e "杜比全景声: ${CYAN}$ATMOS_SAVE_FOLDER${NC}"  
        fi
    done

    cd ..
}

# 查看专辑质量
chakan_zhuanji() {  
    cd "$REPO_DIR" || { echo -e "${RED}无法进入项目目录！${NC}"; return 1; }

    while true; do
        # 获取有效链接
        while :; do
            read -p "请输入有效链接（或输入 0 返回主菜单）: " url
            if [[ "$url" == "0" ]]; then
                cd ..
                return
            fi
            if validate_url "$url"; then
                break
            fi
        done

        echo -e "${CYAN}正在获取专辑质量信息...${NC}"
        go run main.go --debug "$url"
    done
}

# 主程序流程
check_storage
manage_repo
install_dependencies

# 主菜单循环
while :; do
    clear
    echo -e "${GREEN}==== Apple Music 下载器 ====${NC}"
    echo "1. 下载指定曲目"
    echo "2. 下载专辑/歌单"
    echo "3. 下载杜比全景声"
    echo "4. 查看专辑质量"
    echo "5. config配置"
    echo "6. 使用说明"
    echo "7. Gamdl"
    echo "0. 退出程序"
    read -p "请输入选项 [1-0]: " choice

    case $choice in
    1|2|3)  run_download $choice ;;
    4)      chakan_zhuanji ;;
    5)      config_edit 
            # config 主循环
while true; do
    config_edit
    read -r choice
    case $choice in
        1)  edit_field_with_quotes "media-user-token" ;;
        2)  edit_field_with_quotes "authorization-token" ;;
        3)  toggle_field "get-m3u8-from-device" ;;
        4)  edit_field_with_quotes "language" ;;
        5)  edit_field_without_quotes "lrc-type" ;;
        6)  edit_field_with_quotes "lrc-format" ;;
        7)  toggle_field "embed-lrc" ;;
        8)  toggle_field "save-lrc-file" ;;
        9)  toggle_field "save-artist-cover" ;;
        10) toggle_field "save-animated-artwork" ;;
        11) toggle_field "emby-animated-artwork" ;;
        12) toggle_field "embed-cover" ;;
        13) edit_field_without_quotes "cover-size" ;;
        14) edit_field_with_quotes "cover-format" ;;
        15) edit_field_with_quotes "alac-save-folder" ;;
        16) edit_field_with_quotes "atmos-save-folder" ;;
        17) edit_field_without_quotes "max-memory-limit" ;;
        18) edit_field_without_quotes "decrypt-m3u8-port" ;;
        19) edit_field_without_quotes "get-m3u8-port" ;;
        20) edit_field_without_quotes "get-m3u8-mode" ;;
        21) edit_field_without_quotes "aac-type" ;;
        22) edit_field_without_quotes "alac-max" ;;
        23) edit_field_without_quotes "atmos-max" ;;
        24) edit_field_without_quotes "limit-max" ;;
        25) edit_field_with_quotes "album-folder-format" ;;
        26) edit_field_with_quotes "playlist-folder-format" ;;
        27) edit_field_with_quotes "song-file-format" ;;
        28) edit_field_with_quotes "artist-folder-format" ;;
        29) edit_field_without_quotes "explicit-choice" ;;
        30) edit_field_without_quotes "clean-choice" ;;
        31) edit_field_without_quotes "apple-master-choice" ;;
        32) toggle_field "use-songinfo-for-playlist" ;;
        33) toggle_field "dl-albumcover-for-playlist" ;;
        34) edit_field_without_quotes "mv-audio-type" ;;
        35) edit_field_without_quotes "mv-max" ;;
        36) echo "返回主菜单。"; break ;;
        *)  echo "无效选项，请选择 1-36 之间的数字." ;;
    esac
    echo ""
    read -p "按 [Enter] 键继续..." dummy
done
    ;;
    6)      show_help ;;
    7)      # 调用 GAMDL 脚本
            clear
            # 默认下载目录
            DOWNLOAD_DIR="/storage/emulated/0/Music/AM/Gamdl/"
            # gamdl 仓库的默认路径
            GAMDL_DIR="$HOME/gamdl"
            # 状态文件路径
            STATUS_FILE="$HOME/.gamdl_installed"

            # 创建下载目录（如果不存在）
            mkdir -p "$DOWNLOAD_DIR"

            # 判断是否已安装过
            function is_installed() {
                if [ -f "$STATUS_FILE" ]; then
                    return 0 # 表示已安装
                else
                    return 1 # 表示未安装
                fi
            }

            # 标记已安装
            function mark_installed() {
                touch "$STATUS_FILE"
            }

            # 美化输出的函数
            function print_header() {
                echo -e "\n\e[1;34m=============================\e[0m"
                echo -e "\e[1;34m   欢迎使用 GAMDL 工具    \e[0m"
                echo -e "\e[1;34m=============================\e[0m\n"
            }

            # 显示菜单
            function print_menu() {
                echo -e "\e[1;32m1. 下载专辑/MV\e[0m"
                echo -e "\e[1;32m2. 返回主菜单\e[0m"
                echo -e "\n\e[1;33m当前下载目录：$DOWNLOAD_DIR\e[0m"
                echo -n -e "\n请输入您的选择: "
            }

            # 克隆仓库并安装依赖
            function clone_and_install() {
                echo -e "\n\e[1;33m正在克隆仓库并安装依赖...\e[0m"
                
                # 克隆仓库
                git clone https://github.com/glomatico/gamdl.git "$GAMDL_DIR"
                
                # 进入克隆的目录
                cd "$GAMDL_DIR"
                
                # 安装 InquirerPy
                pip install InquirerPy
                
                # 验证 InquirerPy 安装
                python -c "from InquirerPy import inquirer; print('InquirerPy 安装成功')"
                
                # 安装必要的包
                pkg install libjpeg-turbo libpng
                
                # 安装依赖
                pip install click colorama inquirerpy m3u8 mutagen pillow pywidevine pyyaml termcolor yt-dlp
                
                # 验证依赖安装成功
                python -c "import click, colorama, inquirerpy, m3u8, mutagen, pillow, pywidevine, yaml, termcolor, yt_dlp; print('所有模块导入成功')"
                
                # 标记为已安装
                mark_installed
                
                echo -e "\n\e[1;32m仓库已克隆并且依赖已安装成功！\e[0m"
            }

            # 下载专辑
            function download_content() {
                echo -e "\n\e[1;33m请输入专辑链接或者MV链接：\e[0m"
                read URL

                # 使用 python -m gamdl 或 gamdl 下载内容
                echo -e "\n\e[1;33m正在下载内容...\e[0m"
                if command -v gamdl &> /dev/null
                then
                    gamdl "$URL" -o "$DOWNLOAD_DIR"
                else
                    python -m gamdl "$URL" -o "$DOWNLOAD_DIR"
                fi
                
                # 下载完成后，显示下载目录，并让用户决定是否继续操作
                echo -e "\n\e[1;32m内容下载完成。\e[0m"
                echo -e "\e[1;33m文件保存在: $DOWNLOAD_DIR\e[0m"
                
                # 等待用户确认返回主菜单
                echo -e "\n\e[1;32m按 [Enter] 返回Gamdl菜单，或按 [Ctrl+C] 退出程序。\e[0m"
                read
            }

# 主菜单函数
function main_menu() {
    clear  # 清屏
    print_header
    print_menu
    
    read choice
    case $choice in
        1)
            download_content
            ;;
        2)
            echo -e "\n\e[1;32m按 [Enter] 返回AM主菜单，或按 [Ctrl+C] 退出程序。\e[0m"
            read
            ;;
        *)
            echo -e "\n\e[1;31m无效的选择，请重新输入。\e[0m"
            main_menu
            ;;
    esac
}

            # 初次运行时执行克隆并安装
            if ! is_installed; then
                clear  # 清屏
                clone_and_install
                update_repo  # 执行更新仓库
            fi

            # 进入主菜单
            main_menu
            ;;
    0)      echo -e "${GREEN}感谢使用，再见！${NC}"; 
            exit 0 ;;
    *)      echo -e "${RED}无效选项，请重新输入！${NC}"; sleep 1 ;;
    esac
done
